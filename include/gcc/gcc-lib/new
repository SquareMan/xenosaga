/* CYGNUS LOCAL Embedded C++ whole file */
// The -*- C++ -*- dynamic memory management header.
// Copyright (C) 1994, 1996, 1997, 1998, 2000 Free Software Foundation

// This file is part of GNU CC.
//
// GNU CC is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.
// 
// GNU CC is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with GNU CC; see the file COPYING.  If not, write to
// the Free Software Foundation, 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

// As a special exception, you may use this file as part of a free software
// library without restriction.  Specifically, if other files instantiate
// templates or use macros or inline functions from this file, or you compile
// this file and link it with other files to produce an executable, this
// file does not by itself cause the resulting executable to be covered by
// the GNU General Public License.  This exception does not however
// invalidate any other reasons why the executable file might be covered by
// the GNU General Public License.

#ifndef __NEW__
#define __NEW__

#pragma interface "new"
#include <stddef.h>

#ifndef __EMBEDDED_CXX__
// Exception Handling is forbidden in Embedded C++. 
#include <exception>
#define __GCC_THROW(what) throw (what)
#define __GCC_nothing
#else
#define __GCC_THROW(what)
#endif

extern "C++" {

namespace std {

#ifndef __EMBEDDED_CXX__
  class bad_alloc : public exception {
  public:
    virtual const char* what() const throw() { return "bad_alloc"; }
  };
#endif

  struct nothrow_t {};
  extern const nothrow_t nothrow;

  typedef void (*new_handler)();
  new_handler set_new_handler (new_handler);

} // namespace std

// replaceable signatures
void *operator new (size_t) __GCC_THROW (std::bad_alloc);
void *operator new[] (size_t) __GCC_THROW (std::bad_alloc);
void operator delete (void *) __GCC_THROW(__GCC_nothing);
void operator delete[] (void *) __GCC_THROW(__GCC_nothing);
void *operator new (size_t, const nothrow_t&) __GCC_THROW(__GCC_nothing);
void *operator new[] (size_t, const nothrow_t&) __GCC_THROW(__GCC_nothing);
void operator delete (void *, const nothrow_t&) __GCC_THROW(__GCC_nothing);
void operator delete[] (void *, const nothrow_t&) __GCC_THROW(__GCC_nothing);

// default placement versions of operator new
inline void *operator new(size_t, void *place) __GCC_THROW(__GCC_nothing) {
  return place;
}
inline void *operator new[](size_t, void *place) __GCC_THROW(__GCC_nothing) {
  return place;
}

} // extern "C++"

#endif
/* END CYGNUS LOCAL */
